name: Android CI Build

on:
  push:
    branches: [ main ] # Or your default branch
  pull_request:
    branches: [ main ] # Or your default branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin' # Using Temurin (Adoptium) JDK

      - name: Set up Android SDK
        run: |
          # Define Android SDK root and add to GITHUB_ENV for subsequent steps
          echo "ANDROID_SDK_ROOT=${HOME}/android-sdk" >> $GITHUB_ENV
          # ANDROID_HOME is legacy but some tools might still use it.
          echo "ANDROID_HOME=${HOME}/android-sdk" >> $GITHUB_ENV
          # Add SDK manager and platform-tools to PATH
          echo "${HOME}/android-sdk/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "${HOME}/android-sdk/platform-tools" >> $GITHUB_PATH
          echo "${HOME}/android-sdk/emulator" >> $GITHUB_PATH # Though not strictly needed for build

          # Create SDK directories
          mkdir -p ${HOME}/android-sdk/cmdline-tools
          
          # Download and extract command-line tools
          # Note: The exact version/link might change. Check https://developer.android.com/studio#command-tools
          # This link is for version 11.0 (as of Jan 2024, corresponding to your sdkmanager 19.0)
          # You can find newer ones or pin a specific version.
          # Latest as of early 2024 was 11076708 (sdkmanager 12.0 if unzipped to /latest).
          # Your sdkmanager 19.0 likely came from a newer bundle. Let's use a recent one.
          # This is commandlinetools-linux-11076708_latest.zip (which gives SDK Manager 12.0 if extracted to latest).
          # If you need SDK manager 19.0, you'd need a newer cmdline tools zip.
          # Example for cmdline-tools that gives sdkmanager v12 (often results in AGP wanting to upgrade it):
          # wget https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline-tools.zip
          # For something more recent (this will give a higher sdkmanager version, adjust based on availability)
          # Find the latest stable on https://developer.android.com/studio#command-line-tools-only
          # For instance, if 13.0 is available:
          # wget https://dl.google.com/android/repository/commandlinetools-linux-13.0_latest.zip -O cmdline-tools.zip
          #
          # Let's use a known stable one (11.0 as of late 2023 / early 2024) which gives sdkmanager 12.0
          # This is what many `actions/setup-android` type actions might install if not specified.
          # If your build specifically needs sdkmanager 19.0, you'll need to find the corresponding cmdline-tools zip.
          # For robustness, using a community action like `android-actions/setup-android@v3` can simplify this.
          # But to mimic your manual CLI setup:
          CMDTOOLS_VERSION_ZIP="commandlinetools-linux-11076708_latest.zip" # Example version
          wget "https://dl.google.com/android/repository/${CMDTOOLS_VERSION_ZIP}" -O cmdline-tools.zip
          unzip -q cmdline-tools.zip -d ${HOME}/android-sdk/cmdline-tools
          # The unzipped folder is 'cmdline-tools', move its contents to 'latest'
          mv ${HOME}/android-sdk/cmdline-tools/cmdline-tools ${HOME}/android-sdk/cmdline-tools/latest
          rm cmdline-tools.zip

          # List available packages to verify (optional)
          # sdkmanager --list

          # Accept licenses and install required packages
          yes | sdkmanager --licenses # Accept all licenses before installing
          sdkmanager "platforms;android-34" "build-tools;34.0.0" "platform-tools"
        env:
          # This env is for this step only if ANDROID_SDK_ROOT is not in GITHUB_ENV yet.
          # Since we echo to GITHUB_ENV above, subsequent steps will have it.
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT || format('{0}/android-sdk', env.HOME) }}

      - name: Setup Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew assembleDebug
        env:
          # Ensure ANDROID_SDK_ROOT is available to Gradle
          ANDROID_SDK_ROOT: ${{ env.ANDROID_SDK_ROOT }} # Fetches from GITHUB_ENV
          ANDROID_HOME: ${{ env.ANDROID_HOME }}         # Fetches from GITHUB_ENV

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/app-debug.apk
          if-no-files-found: error # Fail the workflow if APK is not found
